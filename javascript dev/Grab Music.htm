<!doctype html>
<html lang=en >
<head>
<title>tubephone</title>
<meta charset=utf-8 >
 <style class="codepen">
		body{
		  font-family: 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif;
		}
		#output{
		  font-size: 66px;
		  color: #005d98;
		  text-align: left;
		  position: fixed;
		  bottom: 18px;
		}
		
		#progress {
		  background: #005d98;
		  position: fixed;
		  bottom: 0;
		  left: 0;
		  height: 16px;
		  width: 0%;
		}
		img#connect-leap{
		  /* this can be removed with leapjs-plugins 0.1.4.1 */
		  max-width: 100%;
		}
    </style>
</head>
<body>
<script src=http://js.leapmotion.com/leap-0.6.0-beta2.js ></script>
<script src=http://mrdoob.github.io/three.js/build/three.min.js ></script>
<script src=http://mrdoob.github.io/three.js/examples/js/controls/TrackballControls.js ></script>
<script src=http://mrdoob.github.io/three.js/examples/js/libs/stats.min.js ></script>


<script>
    // copyright (c) 2014-04-27 ~ Theo Armour ~ MIT License

    // 2014-06-17 ~ User jacobischwartz reports issues running the boilerplate on a Mac. We are investigating...

    var renderer, scene, camera, controls, stats;
    var info, palm, phalanges = [];

    init();
    animate();

    function init() {
        var css, light, geometry, material, mesh;

        css = document.body.appendChild(document.createElement('style'));
        css.innerHTML = 'body { font: 600 12pt monospace; margin: 0; overflow: hidden; text-align: center; }' +
			'h1 a { text-decoration: none;} ' +
		'';

        info = document.body.appendChild(document.createElement('div'));
        info.style.cssText = 'left: 0; margin: auto; position: absolute; right: 0; width: 50%; ';
        info.innerHTML = info.txt = '<h1>' +
				document.title + ' ~ ' +
				'<a href=# onclick=toggleInfo() >&#x24D8;</a>' +
			'</h1>' +
			'<p>Show one hand and five fingers to start</p>' +
			'<div id=data ></div>' +
            '<div id=data2 ></div>' +
            '<div id=data3 ></div>' +
            '<div id=data4 ></div>' +
            '<div id=data5 ></div>' +
            '<div id=data6 ></div>' +
            '<div id=hint ></div>' +
            '<div id=note ></div>' +
			'<div id=gr ></div>' +
			'<div id=output></div>'+
			'<div id=progress></div>'+
			'<div id=grab></div>'
		'';

        // Three.js basics
        scene = new THREE.Scene();

        renderer = new THREE.WebGLRenderer({ alpha: 1, antialias: true, clearColor: 0xffffff });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMapEnabled = true;
        document.body.appendChild(renderer.domElement);

        camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 3000);
        camera.position.set(0, 250, 600);
        controls = new THREE.TrackballControls(camera, renderer.domElement);
        controls.target.set(0, 100, 0);

        stats = new Stats();
        stats.domElement.style.cssText = 'position: absolute; top: 0px; zIndex: 100; ';
        document.body.appendChild(stats.domElement);

        //  Lights
        light = new THREE.AmbientLight(0xffffffff);
        light.color.setHSL(0.1, 0.5, 0.3);
        scene.add(light);

        light = new THREE.DirectionalLight(0xffffffff, 1);
		  //   light = new THREE.DirectionalLight(0xf00fff, 1);
        light.position.set(0, 500, 0);
        light.castShadow = true;
        light.shadowMapWidth = 2048;
        light.shadowMapHeight = 2048;
        var d = 200;
        light.shadowCameraLeft = -d;
        light.shadowCameraRight = d;
        light.shadowCameraTop = d * 2;
        light.shadowCameraBottom = -d * 2;

        light.shadowCameraNear = 100;
        light.shadowCameraFar = 600;
        light.shadowCameraVisible = true;
        scene.add(light);
		
		/*
        geometry = new THREE.TorusGeometry(100, 40, 24, 18, Math.PI * 2);
        material = new THREE.MeshBasicMaterial({ color: 0xffe4c4 });
        var cylinder = new THREE.Mesh(geometry, material);
        scene.add(cylinder);
        // cylinder.rotation.x += 30;
        cylinder.position.y += 150;

        geometry = new THREE.TorusGeometry(100, 40, 24, 18, Math.PI * 2);
        material = new THREE.MeshBasicMaterial({ color: 0xffe4c4 });
        var cylinder2 = new THREE.Mesh(geometry, material);
        scene.add(cylinder2);
        // cylinder.rotation.x += 30;
        cylinder2.position.y += 150;
        cylinder2.position.z -= 75;

        geometry = new THREE.TorusGeometry(100, 40, 24, 18, Math.PI * 2);
        material = new THREE.MeshBasicMaterial({ color: 0xffe4c4 });
        var cylinder3 = new THREE.Mesh(geometry, material);
        scene.add(cylinder3);
        // cylinder.rotation.x += 30;
        cylinder3.position.y += 150;
        cylinder3.position.z -= 150;
		*/
        // ground plane
        material = new THREE.MeshLambertMaterial({ color: 0xaaaaa0 });
        geometry = new THREE.BoxGeometry(600, 5, 600);
        mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
		mesh.position.y = -100;
        scene.add(mesh);
		
        material = new THREE.MeshLambertMaterial({ color: 0xffffff });
        geometry = new THREE.BoxGeometry(600, 10, 10);
        mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
		mesh.position.z = 200;
        scene.add(mesh);
		
		material = new THREE.MeshLambertMaterial({ color: 0xffffff });
        geometry = new THREE.BoxGeometry(600, 10, 10);
        mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
		mesh.position.z = 100;
        scene.add(mesh);
		
		material = new THREE.MeshLambertMaterial({ color: 0xffffff });
        geometry = new THREE.BoxGeometry(600, 10, 10);
        mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
        scene.add(mesh);
		
		material = new THREE.MeshLambertMaterial({ color: 0xffffff });
        geometry = new THREE.BoxGeometry(600, 10, 10);
        mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
		mesh.position.z = -100;
        scene.add(mesh);
		
		material = new THREE.MeshLambertMaterial({ color: 0xffffff });
        geometry = new THREE.BoxGeometry(600, 10, 10);
        mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
		mesh.position.z = -200;
        scene.add(mesh);
        // palm
        geometry = new THREE.BoxGeometry(80, 20, 80);
        geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, 0, -30));  // to to +30 if using pitch roll & yaw
        material = new THREE.MeshNormalMaterial();
        palm = new THREE.Mesh(geometry, material);
        palm.castShadow = true;
        palm.receiveShadow = true;
        scene.add(palm);

        // phalanges
        geometry = new THREE.BoxGeometry(16, 12, 1);
        for (var i = 0; i < 15; i++) {
            mesh = new THREE.Mesh(geometry, material);
            mesh.castShadow = true;
            mesh.receiveShadow = true;
            scene.add(mesh);
            phalanges.push(mesh);
        }






    }
	progress = document.getElementById('progress'); 
    function toggleInfo() {
        info.innerHTML = info.txt +
			'<div onclick=info.innerHTML=info.txt style=background-color:#ccc;opacity:0.7;padding:10px;text-align:left; >' +
			'Some helpful text can go here.<br>' +
			'Such as: use your pointing device to zoom, pan and rotate.<br>' +
			'<a href="https://github.com/jaanga/gestification/tree/gh-pages/cookbook/boilerplate" target="_blank">Source code.</a><br>' +
			'<small>' +
				'credits: <a href="http://threejs.org" target="_blank">three.js</a> - ' +
				'<a href="http://leapmotion.com" target="_blank">leap motion</a> - ' +
				'<a href="http://khronos.org/webgl/" target="_blank">webgl</a> - ' +
				'<a href="http://jaanga.github.io" target="_blank">jaanga</a><br>' +
				'copyright &copy; 2014 jaanga authors ~ mit license' +
			'</small><br><br>' +
			'<i>Click anywhere in this message to hide...</i>' +
		'</div>';
    }
    var previndexvector;
    var premiddlevector;
    var poseindexflag = false;
    var posemiddleflag = false;
    var audio = new Audio('68448__pinkyfinger__piano-g.wav');
    var playmusic = false;
    var thetrack;
    var position;
	var sum;
	var audioname;
	var facing;
	var musiccount = 0;
	var musicexclusive = false;
	var pitchcolor = 0xffff00;
    Leap.loop(function (frame) 
	{
        var hand, phalanx, point, length;
		
		
		
	  
	  	
	  
	  
        if (frame.hands.length) {
            hand = frame.hands[0];
			grab.innerHTML = hand.grabStrength.toPrecision(2);
			progress.style.width = hand.grabStrength * 100 + '%';
			/*
            if(hand.grabStrength.toPrecision(2) > 0.7)
			{
				if(musicexclusive == false)
				{
					//if (musiccount <= 0) 
					//{
						
							audio.pause();
							audio = new Audio("4832__zajo__drum07.wav");
							
							audio.play();
							musiccount = 1;
							musicexclusive = true;
					// }
					// else
					// {
					//	musiccount--;
					//	if(musiccount <= 0)
					//	{
					//		audio.pause();
					//	}
					 //}
				 }
			
			}
			else if(hand.grabStrength.toPrecision(2) < 0.2)
			{	if(musicexclusive == false)
				{
				//if  (musiccount <= 0) 
				//{
					audio.pause();
					 audio = new Audio("178668__hanbaal__snare.wav");
							
					audio.play();
					 musiccount = 0;
					 musicexclusive = true;
				//}
				//else
				//{
				//	 musiccount--;
				//	if(musiccount <= 0)
				//	{
				//		audio.pause();
				//	}
				//	 }
				}
			
			
			}
			else
			{
				musicexclusive = false;
			
			}
			*/
			palm.position.set(hand.palmPosition[0], hand.palmPosition[1], hand.palmPosition[2]);
			data4.innerHTML = 'Palm Normal:X.' + hand.palmNormal[0] + 'Y.' + hand.palmNormal[1] + 'Z.' + hand.palmNormal[2];
			//palm.rotation.set( hand.pitch(), -hand.yaw(), hand.roll() );
            direction = new THREE.Vector3(hand.direction[0], hand.direction[1], hand.direction[2]);  // best so far
            data3.innerHTML = 'Hand X:' + hand.direction[0].toFixed(0) + ' Y:' + hand.direction[1].toFixed(0) + ' Z:' + hand.direction[2].toFixed(0);
            palm.lookAt(direction.add(palm.position));
            palm.rotation.z = -hand.roll();
            data.innerHTML = 'Hand X:' + hand.palmPosition[0].toFixed(0) + ' Y:' + hand.palmPosition[1].toFixed(0) + ' Z:' + hand.palmPosition[2].toFixed(0); //hand.drection[2] 60~-60
            hint.innerHTML = 'PALM VELOCITY' + hand.palmVelocity[0] + ' Y:' + hand.palmVelocity[1] + ' Z:' + hand.palmVelocity[2];
            
			if( hand.palmPosition[1] < 100)
			{
				audio.volume = 0.0;
			}
			else if(hand.palmPosition[1] >= 100 && hand.palmPosition[1]<200)
			{			
				audio.volume = ((hand.palmPosition[1]-100)/100).toFixed(1);		
			}
			else if(hand.palmPosition[1] >= 200)
			{
				audio.volume = 1;
			}
			
			
			if (hand.palmPosition[2].toFixed(0) < -180) 
			{
				data6.innerHTML = 'F';
				position = 0;
				audioname = '68446__pinkyfinger__piano-f.wav';
				pitchcolor = 0x00FF00;
            }
            else if (hand.palmPosition[2].toFixed(0) > -180 && hand.palmPosition[2].toFixed(0) < -120) {

                data6.innerHTML = 'E';
                position = 1;
				audioname = '68443__pinkyfinger__piano-e.wav';
				pitchcolor = 0xFFFF00;
            }
            else if (hand.palmPosition[2].toFixed(0) > -120 && hand.palmPosition[2].toFixed(0) < -80) {

                data6.innerHTML = 'D';
                position = 2;
				audioname = '68442__pinkyfinger__piano-d.wav';
				pitchcolor = 0xFF7F00;
            }
			else if (hand.palmPosition[2].toFixed(0) > -80 && hand.palmPosition[2].toFixed(0) < -20) {

                data6.innerHTML = 'C';
                position = 3;
				audioname = '68441__pinkyfinger__piano-c.wav';
				pitchcolor = 0xff0000;
            }
			else if (hand.palmPosition[2].toFixed(0) > -20 && hand.palmPosition[2].toFixed(0) < 20) {

                data6.innerHTML = 'B';
                position = 4;
				audioname = '68438__pinkyfinger__piano-b.wav';
				pitchcolor = 0x8B00FF;
				
            }
			else if (hand.palmPosition[2].toFixed(0) > 20 && hand.palmPosition[2].toFixed(0) < 80) {

                data6.innerHTML = 'A';
                position = 5;
				audioname = '68437__pinkyfinger__piano-a.wav';
				pitchcolor = 0x4B0082;
            }
			else if (hand.palmPosition[2].toFixed(0) > 80 && hand.palmPosition[2].toFixed(0) < 120) {

                data6.innerHTML = 'G';
                position = 6;
				audioname = '68448__pinkyfinger__piano-g.wav';
				pitchcolor = 0x0000FF;
				
            }
			else if (hand.palmPosition[2].toFixed(0) > 120 && hand.palmPosition[2].toFixed(0) < 180) {

                data6.innerHTML = 'F';
                position = 7;
				audioname = '68446__pinkyfinger__piano-f.wav';
				pitchcolor = 0x00FF00;
            }
			else if (hand.palmPosition[2].toFixed(0) > 180) {

                data6.innerHTML = 'E';
                position = 8;
				audioname = '68443__pinkyfinger__piano-e.wav';
				pitchcolor = 0xFFFF00;
            }
			if(hand.grabStrength.toPrecision(2) > 0.7)
			{
				if(musicexclusive == false)
				{
					if (musiccount <= 0) 
					{
							audio.pause();
							audio = new Audio(audioname);
							
							audio.play();
							musiccount = 3;
							musicexclusive = true;
							
							var geometry = new THREE.SphereGeometry( 10, 32, 32 );
							var material = new THREE.MeshBasicMaterial( {color: pitchcolor} );
							var sphere = new THREE.Mesh( geometry, material );
							sphere.position.x =hand.palmPosition[0];
							sphere.position.y =hand.palmPosition[1];
							//sphere.position.z =hand.palmPosition[2];
							sphere.position.z =( position - 4) * 50;
							 sphere.castShadow = true;
        sphere.receiveShadow = true;
							//hand.palmPosition[0], hand.palmPosition[1], hand.palmPosition[2]
							scene.add( sphere );
					}
					else
					{
						musiccount--;
						if(musiccount <= 0)
						{
							audio.pause();
						}
					}
				 }
			
			}
			else
			{
				musicexclusive = false;
			
			}

        }
        iLen = (frame.pointables.length < 5) ? frame.pointables.length : 5;
        for (var i = 0; i < iLen; i++) {
            for (var j = 0; j < 3; j++) {
                phalanx = phalanges[3 * i + j];
                point = frame.pointables[i].positions[j];
                phalanx.position.set(point[0], point[1], point[2]);
                point = frame.pointables[i].positions[j + 1];

                if (i == 1 && j == 2) {
                    var tempvelocity = frame.pointables[i].tipVelocity;
                    note.innerHTML = 'Velocity' + tempvelocity[0] + ';' + tempvelocity[1] + ';' + tempvelocity[2];
                }
                if (i == 1 && j == 2) {
                    data2.innerHTML = 'Point' + point[0] + ';' + point[1] + ';' + point[2];
                }

                
                
                
                /*
				if (posemiddleflag && poseindexflag) {
                    data5.innerHTML = 'DETECT';
                    switch (sum) {
                        case 0:
                            data5.innerHTML = 'D DEEP DOWN';
                           // audioname = '68443__pinkyfinger__piano-e.wav';
                            audioname = '68442__pinkyfinger__piano-d.wav';
                            break;
                        case 1:
                            data5.innerHTML = 'G MIDDLE DOWN';
                            //audioname = '68437__pinkyfinger__piano-a.wav';
                            audioname = '68448__pinkyfinger__piano-g.wav';
                            break;
                        case 2:
                            data5.innerHTML = 'B OUT DOWN';
                            
                            audioname = '68438__pinkyfinger__piano-b.wav';
                            break;
                        case 10:
                            data5.innerHTML = 'C DEEP LEFT';
                            audioname = '68441__pinkyfinger__piano-c.wav';
                            break;
                        case 11:
                            data5.innerHTML = 'F MIDDLE LEFT';
                            audioname = '68446__pinkyfinger__piano-f.wav';
                            break;
                        case 12:
                            data5.innerHTML = 'B#### OUT LEFT';
                            audioname = '68448__pinkyfinger__piano-g.wav';
                            break;
                        case 20:
                            data5.innerHTML = 'E DEEP RIGHT';
                           // audioname = '68442__pinkyfinger__piano-d.wav';
                            audioname = '68443__pinkyfinger__piano-e.wav';
                            break;
                        case 21:
                            data5.innerHTML = 'A MIDDLE RIGHT';
                           // audioname = '68448__pinkyfinger__piano-g.wav';
                            audioname = '68437__pinkyfinger__piano-a.wav';
                            break;
                        case 22:
                            data5.innerHTML = 'B#### OUT RIGHT';
                            audioname = '68448__pinkyfinger__piano-g.wav';
                            break;
                        default:
                            data5.innerHTML = 'NO';
                            break;
                    }

                    if (playmusic == false) {
                        //thetrack = getAudio(true);
                        audio.pause();
                        audio = new Audio(audioname);
                        
                        audio.play();
                        playmusic = true;
                    }
                }
                else {
                    if (playmusic == true) {
                        //thetrack.pause();
                        audio.pause();
                        playmusic = false;
                    }
                    data5.innerHTML = 'not DETECT';
                }
				*/
                //audio.pause();
                point = new THREE.Vector3(point[0], point[1], point[2]);

                phalanx.lookAt(point);
                length = phalanx.position.distanceTo(point);
                phalanx.translateZ(0.5 * length);
                phalanx.scale.set(1, 1, length);
            }
        }
    });

    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
        controls.update();
        stats.update();
    }

    function getAudio(play) {
        var audio = new Audio('68448__pinkyfinger__piano-g.wav');
        if (play) {
            audio.play();
        }

        return audio;
    }
</script>
</body>
</html>